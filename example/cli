#!/usr/bin/env php
<?php

use App\Bootstrap;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Schema\Builder;
use Illuminate\Support\Pluralizer;
use Octo\Fast;
use Octo\FastCache;
use Octo\File;
use Octo\Inflector;
use Octo\Orm;
use Octo\Work;
use function Octo\faker;
use function Octo\path;

ini_set('error_reporting', E_ALL);
ini_set('display_errors', true);

if (file_exists(realpath(__DIR__) . '/.env')) {
    $ini = parse_ini_file(realpath(__DIR__) . '/.env');
} elseif (file_exists(realpath(__DIR__) . '/../.env')) {
    $ini = parse_ini_file(realpath(__DIR__) . '/../.env');
}

require_once __DIR__ . '/vendor/autoload.php';

call_user_func(function () use ($argv) {
    try {
        Bootstrap::run(true);

        if (count($argv) > 1) {
            array_shift($argv);
            new CliOcto(\Octo\App::create(), \Octo\app_path() . '/databases', $argv);
        } else {
            Octo\Cli::show('Please provide an action', 'ERROR');
        }
    }  catch (Exception $e) {
        Octo\Cli::show($e->getMessage() . ' === [' . $e->getFile() . ' ' . $e->getLine() . '] ===', 'ERROR');
        dd($e, debug_backtrace());
    }
});

class CliOcto
{
    /**
     * @var string
     */
    private $path_migrations;

    /**
     * @var string
     */
    private $path_seeds;

    /**
     * @var string
     */
    private $table_migrations = "octo_migration";

    /**
     * @var string
     */
    private $table_seeds = "octo_seed";

    /**
     * @var PDO
     */
    private $pdo;

    /**
     * @var Orm
     */
    private $orm;

    /**
     * @var Builder
     */
    private $schema;
    /**
     * @var Fast
     */
    private $app;

    /**
     * @param Fast $app
     * @param $path
     * @param array $args
     * @throws ReflectionException
     * @throws \Octo\Exception
     */
    public function __construct(Fast $app, string $path, array $args)
    {
        if (!is_dir($path)) {
            Octo\File::mkdir($path);
        }

        $this->app = $app;
        $this->path_migrations = $path . '/migrations';

        if (!is_dir($this->path_migrations)) {
            Octo\File::mkdir($this->path_migrations);
        }

        $this->path_seeds = $path . '/seeds';

        if (!is_dir($this->path_seeds)) {
            Octo\File::mkdir($this->path_seeds);
        }

        $this->run($args);
    }

    /**
     * @throws ReflectionException
     */
    public function setupDb()
    {
        /** @var PDO pdo */
        $this->pdo = Octo\in(PDO::class);

        $this->orm = new Orm($this->pdo);

        $this->schema = $this->orm->schema();

        if (!$this->hasTable($this->table_migrations)) {
            $this->createRepository();
        }

        if (!$this->hasTable($this->table_seeds)) {
            $this->createRepositorySeeder();
        }
    }

    /**
     * @return string
     */
    public function getPathMigrations(): string
    {
        return $this->path_migrations;
    }

    /**
     * @return string
     */
    public function getPathSeeds(): string
    {
        return $this->path_seeds;
    }

    /**
     * @throws ReflectionException
     */
    private function make_caching()
    {
        $this->caching();
    }

    /**
     * @throws ReflectionException
     */
    private function sessions_migrate()
    {
        $this->setupDb();

        if (!$this->hasTable('sessions')) {
            $this->getSchema()->create('sessions', function (Blueprint $table) {
                $table->collation = 'utf8_general_ci';
                $table->charset = 'utf8';
                $table->string('id')->unique();
                $table->text('payload');
                $table->integer('last_activity');
                $table->engine = 'InnoDB';
            });

            $this->show("Sessions table has been created.");
        } else {
            $this->show("Sessions table ever exists.", 'ERROR');
        }
    }

    /**
     * @throws ReflectionException
     */
    private function sessions_rollback()
    {
        $this->setupDb();

        if (!$this->hasTable('sessions')) {
            $this->show("Sessions table does not exists.", 'ERROR');
        } else {
            $this->getSchema()->dropIfExists('sessions');
            $this->show("Sessions table has been dropped.");
        }
    }

    /**
     * @throws ReflectionException
     */
    private function notification_migrate()
    {
        $this->make_notification_table();
    }

    /**
     * @throws ReflectionException
     */
    private function make_notification_table()
    {
        $this->setupDb();

        if (!$this->hasTable('notification')) {
            $this->getSchema()->create('notification', function (Blueprint $table) {
                $table->collation = 'utf8_general_ci';
                $table->charset = 'utf8';
                $table->uuid('id')->primary();
                $table->string('type');
                $table->morphs('notifiable');
                $table->longText('data');
                $table->timestamp('read_at')->nullable();
                $table->timestamp('created_at')->nullable()->useCurrent();
                $table->timestamp('updated_at')->nullable()->useCurrent();
                $table->engine = 'InnoDB';
            });

            $this->show("Notification table has been created.");
        } else {
            $this->show("Notification table ever exists.", 'ERROR');
        }
    }

    /**
     * @throws ReflectionException
     */
    private function caching()
    {
        $this->setupDb();

        if (!$this->hasTable('caching')) {
            $this->getSchema()->create('caching', function (Blueprint $table) {
                $table->collation = 'utf8_general_ci';
                $table->charset = 'utf8';
                $table->string('k')->primary()->unique();
                $table->longText('v')->nullable();
                $table->unsignedBigInteger('e')->index();
                $table->engine = 'InnoDB';
            });

            $this->show("Caching table has been created.");
        } else {
            $this->show("Caching table ever exists.", 'ERROR');
        }
    }

    /**
     * @throws ReflectionException
     */
    private function caching_migrate()
    {
        $this->caching();
    }

    /**
     * @throws ReflectionException
     */
    private function queue_migrate()
    {
        $this->setupDb();

        if (!$this->hasTable('queue')) {
            $this->getSchema()->create('queue', function (Blueprint $table) {
                $table->collation = 'utf8_general_ci';
                $table->charset = 'utf8';
                $table->increments('id');
                $table->string('name')->nullable()->default(null);
                $table->integer('status')->default(0);
                $table->integer('retries')->default(0);
                $table->timestamp('timestamp');
                $table->longText('payload')->nullable();
                $table->timestamp('created_at')->nullable()->useCurrent();
                $table->timestamp('updated_at')->nullable()->useCurrent();
                $table->engine = 'InnoDB';
            });

            $this->show("Queue table has been created.");
        } else {
            $this->show("Queue table ever exists.", 'ERROR');
        }
    }

    /**
     * @throws ReflectionException
     */
    private function queue_rollback()
    {
        $this->setupDb();

        if (!$this->hasTable('queue')) {
            $this->show("Queue table does not exists.", 'ERROR');
        } else {
            $this->getSchema()->dropIfExists('queue');
            $this->show("Queue table has been dropped.");
        }
    }

    /**
     * @throws ReflectionException
     */
    private function caching_rollback()
    {
        $this->setupDb();

        if (!$this->hasTable('caching')) {
            $this->show("Caching table does not exists.", 'ERROR');
        } else {
            $this->getSchema()->dropIfExists('caching');
            $this->show("Caching table has been dropped.");
        }
    }
    /**
     * @throws ReflectionException
     */
    private function notification_rollback()
    {
        $this->setupDb();

        if (!$this->hasTable('notification')) {
            $this->show("Notification table does not exists.", 'ERROR');
        } else {
            $this->getSchema()->dropIfExists('notification');
            $this->show("Notification table has been dropped.");
        }
    }

    private function serve($port = 8000)
    {
        $base = realpath(__DIR__);

        $this->show('Server is running on http://localhost:' . $port);

        passthru("php -S localhost:{$port} {$base}/server.php");
    }

    /**
     * @throws ReflectionException
     */
    private function drop()
    {
        $this->setupDb();

        $tables = $this->query("SHOW TABLES")->fetchAll();

        foreach ($tables as $row) {
            $table = $row[0];

            if ($table !== $this->table_migrations && $table !== $this->table_seeds) {
                $sql = "DROP TABLE $table";
            } else {
                $sql = "TRUNCATE TABLE $table";
            }

            $this->exec($sql);
        }

        $this->show('All tables have been dropped.');
    }

    /**
     * @param null $tableToEmpty
     * @throws ReflectionException
     */
    private function empty($tableToEmpty = null)
    {
        $this->setupDb();

        $tables = $this->query("SHOW TABLES")->fetchAll();

        foreach ($tables as $row) {
            $table = $row[0];

            if (!is_null($tableToEmpty) && $table !== $tableToEmpty) {
                continue;
            }

            $sql = "TRUNCATE TABLE $table";

            $this->exec($sql);
        }

        $this->show('All tables have been truncated.');
    }

    /**
     * @param array $args
     * @throws ReflectionException
     */
    private function run(array $args)
    {
        $cmd        = array_shift($args);
        $action     = str_replace(':', '_', $cmd);
        $proceed    = false;

        if (in_array($action, get_class_methods($this))) {
            $this->{$action}(...$args);
            $proceed = true;
        } else {
            $path = \Octo\app_path() . '/Commands';

            if (is_dir($path)) {
                $commandsFiles = glob($path . '/*.php', GLOB_NOSORT);

                foreach ($commandsFiles as $commandsFile) {
                    require_once $commandsFile;
                    $class = '\\App\\Commands\\' . str_replace([$path . '/', '.php'], '', $commandsFile);
                    $instance = Octo\gi()->factory($class);

                    if (in_array($action, get_class_methods($instance))) {
                        $params = array_merge([$instance, $action], array_merge($args, [$this->app]));
                        Octo\gi()->call(...$params);
                        $proceed = true;
                    }
                }
            }
        }

        if (false === $proceed) {
            $this->show('Task "' . $cmd . '" does not exist.', 'ERROR');
        }
    }

    /**
     * @throws ReflectionException
     * @throws \Octo\Exception
     */
    private function cron()
    {
        $this->show('Cron job start');
        $this->job_process();
        $this->show('Cron job end');
    }

    /**
     * @throws ReflectionException
     * @throws \Octo\Exception
     */
    private function run_jobs()
    {
        $this->job_process();
    }

    /**
     * @throws ReflectionException
     * @throws \Octo\Exception
     */
    private function job_process()
    {
        $computed = \App\Facades\Bus::process();

        $jobString = $computed > 1 ? 'jobs' : 'job';

        if (0 < $computed) {
            $this->show($computed . ' ' . $jobString . ' processed');
        } else {
            $this->show("No job to process", "ERROR");
        }
    }

    /**
     * @throws \Octo\Exception
     */
    private function make_job(...$args)
    {
        $this->job_add(...$args);
    }

    /**
     * @param string $name
     * @throws \Octo\Exception
     */
    private function job_add(string $name)
    {
        $this->stubber('job', $name);
    }

    /**
     * @throws ReflectionException
     */
    private function init_sql_cache()
    {
        $this->setupDb();

        if (!$this->hasTable('data_cache')) {
            $sql = "CREATE TABLE IF NOT EXISTS `data_cache` (
  `k` varchar(255) NOT NULL,
  `v` longtext NOT NULL,
  `e` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`k`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;";
            $this->query($sql);

            $this->show("SQL Cache is now enabled");
        } else {
            $this->show("SQL Cache is ever enabled", "ERROR");
        }
    }

    /**
     * @throws \Octo\Exception
     */
    private function make_event(...$args)
    {
        $this->event_add(...$args);
    }

    /**
     * @param string $name
     * @throws \Octo\Exception
     */
    private function event_add(string $name)
    {
        $this->stubber('event', $name);
    }

    /**
     * @throws \Octo\Exception
     */
    private function make_request()
    {
        $this->request_add(...func_get_args());
    }

    /**
     * @param string $name
     * @throws \Octo\Exception
     */
    private function request_add(string $name)
    {
        $this->stubber('request', $name);
    }

    /**
     * @throws \Octo\Exception
     */
    private function make_entity()
    {
        $this->entity(...func_get_args());
    }

    /**
     * @param string $name
     * @throws \Octo\Exception
     */
    private function entity(string $name)
    {
        $class = Octo\Inflector::camelize($name);

        $stub = $this->getStub('entity', $class, $name);

        if (!is_dir(Octo\app_path() . '/Models')) {
            Octo\File::mkdir(Octo\app_path() . '/Models');
        }

        $file = Octo\app_path() . '/Models/'  . $class . '.php';

        if (!file_exists($file)) {
            Octo\File::put($file, $stub);
            $this->show("Class {$class} has been created.");
        } else {
            $this->show("Class {$class} ever exists.", 'ERROR');
        }
    }

    /**
     * @throws \Octo\Exception
     */
    private function make_factory()
    {
        $this->factory(...func_get_args());
    }

    /**
     * @param string $name
     * @throws \Octo\Exception
     */
    private function factory(string $name)
    {
        $class = Octo\Inflector::camelize($name);

        $stub = $this->getStub('factory', $class, $name);

        if (!is_dir(Octo\app_path() . '/Factories')) {
            Octo\File::mkdir(Octo\app_path() . '/Factories');
        }

        $file = Octo\app_path() . '/Factories/'  . $class . '.php';

        if (!file_exists($file)) {
            Octo\File::put($file, $stub);
            $this->show("Class {$class} has been created.");
        } else {
            $this->show("Class {$class} ever exists.", 'ERROR');
        }
    }

    /**
     * @throws \Octo\Exception
     */
    private function make_observer()
    {
        $this->observer(...func_get_args());
    }

    /**
     * @param string $name
     * @throws \Octo\Exception
     */
    private function observer(string $name)
    {
        $this->stubber('observer', $name);
    }

    /**
     * @throws \Octo\Exception
     */
    private function make_callable()
    {
        $this->callable(...func_get_args());
    }

    /**
     * @param string $name
     * @throws \Octo\Exception
     */
    private function callable(string $name)
    {
        $this->stubber('callable', $name);
    }
    /**
     * @throws \Octo\Exception
     */
    private function make_service()
    {
        $this->callable(...func_get_args());
    }

    /**
     * @param string $name
     * @throws \Octo\Exception
     */
    private function service(string $name)
    {
        $this->stubber('callable', $name);
    }

    /**
     * @throws \Octo\Exception
     */
    private function make_module()
    {
        $this->module(...func_get_args());
    }

    /**
     * @param string $name
     * @throws \Octo\Exception
     */
    private function module(string $name)
    {
        $this->stubber('module', $name);
    }

    /**
     * @throws \Octo\Exception
     */
    private function make_resource()
    {
        $this->resource(...func_get_args());
    }

    /**
     * @param string $name
     * @throws \Octo\Exception
     */
    private function resource(string $name)
    {
        $this->stubber('resource', $name);
        $this->stubber('request', $name);
    }

    /**
     * @throws \Octo\Exception
     */
    private function make_middleware()
    {
        $this->middleware(...func_get_args());
    }

    /**
     * @param string $name
     * @throws \Octo\Exception
     */
    private function middleware(string $name)
    {
        $this->stubber('middleware', $name);
    }

    /**
     * @throws \Octo\Exception
     */
    private function make_subscriber()
    {
        $this->subscriber(...func_get_args());
    }

    /**
     * @param string $name
     * @throws \Octo\Exception
     */
    private function subscriber(string $name)
    {
        $this->stubber('subscriber', $name);
    }

    /**
     * @param string $type
     * @param string $name
     * @throws \Octo\Exception
     */
    private function stubber(string $type, string $name)
    {
        $typePath = Inflector::ucfirst(
                Inflector::lower($type !== 'resource' ? $type : 'module')
        ) . 's';

        $class = Inflector::camelize($name);

        $stub = $this->getStub($type, $class, $name);

        if (!is_dir(Octo\app_path() . '/' . $typePath)) {
            File::mkdir(Octo\app_path() . '/' . $typePath);
        }

        $class = !in_array($type, ['module', 'resource', 'request'])
            ? $class
            : Inflector::camelize($class . '_' . mb_strtolower(substr($typePath, 0, -1)));

        $file = Octo\app_path() . '/' . $typePath . '/'  . $class . '.php';

        if (!file_exists($file)) {
            File::put($file, $stub);
            $this->show("Class {$class} has been created.");
        } else {
            $this->show("Class {$class} ever exists.", 'ERROR');
        }
    }

    /**
     * @throws \Octo\Exception
     */
    private function make_repository(string $name)
    {
        $class = Inflector::camelize($name);

        if (!is_dir(Octo\app_path('Repositories'))) {
            File::mkdir(Octo\app_path('Repositories'));
        }

        $stub = $this->getStub('repository', $class, $name);

        $file = Octo\app_path('Repositories') . '/'  . $class . 'Repository.php';

        if (!file_exists($file)) {
            File::put($file, $stub);
            $this->show("Class {$class}Repository has been created.");
        } else {
            $this->show("Class {$class}Repository ever exists.", 'ERROR');
        }
    }


    /**
     * @throws \Octo\Exception
     */
    private function make_model()
    {
        $this->eloquent(...func_get_args());
    }

    /**
     * @param string $name
     * @throws \Octo\Exception
     */
    private function eloquent(string $name)
    {
        $class = Inflector::camelize($name);

        if (!is_dir(Octo\app_path() . '/Models')) {
            File::mkdir(Octo\app_path() . '/Models');
        }

        $stub = $this->getStub('eloquent', $class, $name);

        $file = Octo\app_path() . '/Models/'  . $class . '.php';

        if (!file_exists($file)) {
            File::put($file, $stub);
            $this->show("Class {$class} has been created.");
        } else {
            $this->show("Class {$class} ever exists.", 'ERROR');
        }
    }

    /**
     * @return string
     */
    private function getKey()
    {
        $time = microtime();
        list($micro, $timestamp) = explode(' ', $time, 2);
        list($dummy, $micro) = explode('.', $micro, 2);

        return substr($timestamp . $micro, 0, -4);
    }

    /**
     * @throws ReflectionException
     */
    private function make_rollback()
    {
        $this->rollback();
    }

    /**
     * @throws ReflectionException
     */
    private function rollback()
    {
        $this->setupDb();

        $query = "SELECT batch FROM {$this->table_migrations} ORDER BY batch DESC LIMIT 1";
        $batch = $this->query($query)->fetchColumn();
        $files = glob($this->getPathMigrations() . DS . "*{$batch}*.php");

        if (count($files) === 1) {
            $file = array_shift($files);
            $path = str_replace('.php', '', pathinfo($file, PATHINFO_BASENAME));
            $class = Octo\Inflector::camelize($path);
            $batch = (int) $batch;

            require_once $file;

            $instance = new $class;

            Octo\callMethod($instance, 'down', $this->getSchema());

            $query = "DELETE FROM {$this->table_migrations} WHERE batch = $batch";
            $this->exec($query);

            $this->show("Class {$class} has been rollbacked.");
        } else {
            $this->show("No migration to rollback.");
        }
    }

    private function make_unseed()
    {
        $this->unseed();
    }

    /**
     * @throws ReflectionException
     */
    private function unseed()
    {
        $this->setupDb();

        $query = "SELECT batch FROM {$this->table_seeds} ORDER BY batch DESC LIMIT 1";
        $batch = $this->query($query)->fetchColumn();
        $files = glob($this->getPathSeeds() . DS . "*{$batch}*.php");

        if (count($files) === 1) {
            $file = array_shift($files);
            $path = str_replace('.php', '', pathinfo($file, PATHINFO_BASENAME));
            $class = Octo\Inflector::camelize($path);
            $batch = (int) $batch;

            $code = Octo\File::read($file);

            $table = Octo\cut(")->into('", "')'", $code);

            $query = "TRUNCATE TABLE {$table}";
            $this->exec($query);

            $query = "DELETE FROM {$this->table_seeds} WHERE batch = $batch";
            $this->exec($query);

            $this->show("Class {$class} has been unseeded.");
        } else {
            $this->show("No seed to unseed.");
        }
    }

    /**
     * @param string $msg
     * @param string $type
     */
    private function show($msg, $type = 'INFO')
    {
        Octo\Cli::show($msg, $type);
    }

    /**
     * @throws ReflectionException
     */
    private function migrate()
    {
        $this->setupDb();

        $files = glob($this->getPathMigrations() . DS . "*.php");

        if (empty($files)) {
            $this->show("No migration to migrate.");
        } else {
            $proceed = false;

            foreach ($files as $file) {
                $path = str_replace('.php', '', pathinfo($file, PATHINFO_BASENAME));
                $class = Octo\Inflector::camelize($path);
                list($action, $name, $batch) = explode('_', $path, 3);
                $batch = (int) $batch;
                $query = "SELECT COUNT(id) FROM {$this->table_migrations} WHERE batch = $batch";
                $res = $this->query($query)->fetchColumn();

                if (0 === $res) {
                    $query = "INSERT INTO {$this->table_migrations} (migration, batch)
                    VALUES ('{$action}_{$name}', $batch)";
                    $this->exec($query);

                    require_once $file;

                    $instance = Octo\gi()->make($class);

                    Octo\gi()->call($instance, 'up', $this->getSchema());

                    $this->show("Class {$class} has been migrated.");

                    $proceed = true;
                }
            }

            if (false === $proceed) {
                $this->show("No migration to migrate.");
            }
        }
    }

    /**
     * @throws ReflectionException
     */
    private function seed()
    {
        $this->setupDb();

        $files = glob($this->getPathSeeds() . DS . "*.php");

        if (empty($files)) {
            $this->show("No seed to seed.");
        } else {
            $proceed = false;

            foreach ($files as $file) {
                $path = str_replace('.php', '', pathinfo($file, PATHINFO_BASENAME));
                $class = Octo\Inflector::camelize($path);
                list($action, $name, $batch) = explode('_', $path, 3);
                $batch = (int) $batch;
                $query = "SELECT COUNT(id) FROM {$this->table_seeds} WHERE batch = $batch";
                $res = $this->query($query)->fetchColumn();

                if (0 === $res) {
                    $query = "INSERT INTO {$this->table_seeds} (seeder, batch)
                    VALUES ('{$action}_{$name}', $batch)";
                    $this->exec($query);

                    require_once $file;

                    $instance = Octo\gi()->make($class);

                    Octo\gi()->call($instance, 'seeds', $this->getOrm(), faker());

                    $this->show("Class {$class} has been seeded.");

                    $proceed = true;
                }
            }

            if (false === $proceed) {
                $this->show("No seed to seed.");
            }
        }
    }

    private function make_migration()
    {
        $this->create(...func_get_args());
    }

    /**
     * @param string $name
     */
    private function create(string $name)
    {
        $key = $this->getKey();

        $name = Octo\Inflector::slug($name, '_');

        $path = 'create_' . $name . '_' . $key;

        $class = Octo\Inflector::camelize($path);

        $stub = $this->getStub('create', $class);

        $file = $this->getPathMigrations() . DS . $path . '.php';

        if (!file_exists($file)) {
            Octo\File::put($file, $stub);
            $this->show("Class {$class} has been created.");
        } else {
            $this->show("Class {$class} ever exists.", 'ERROR');
        }
    }

    private function make_seed()
    {
        $this->seeder(...func_get_args());
    }

    /**
     * @param string $name
     */
    private function seeder(string $name)
    {
        $key = $this->getKey();

        $name = Octo\Inflector::slug($name, '_');

        $path = 'seeder_' . $name . '_' . $key;

        $class = Octo\Inflector::camelize($path);

        $stub = $this->getStub('seeder', $class);

        $file = $this->getPathSeeds() . DS . $path . '.php';

        if (!file_exists($file)) {
            Octo\File::put($file, $stub);
            $this->show("Class {$class} has been created.");
        } else {
            $this->show("Class {$class} ever exists.", 'ERROR');
        }
    }

    private function make_update()
    {
        $this->update(...func_get_args());
    }

    /**
     * @param string $name
     */
    private function update(string $name)
    {
        $key = $this->getKey();

        $name = Octo\Inflector::slug($name, '_');

        $path = 'update_' . $name . '_' . $key;

        $class = Octo\Inflector::camelize($path);

        $stub = $this->getStub('update', $class);

        $file = $this->getPathMigrations() . DS . $path . '.php';

        if (!file_exists($file)) {
            Octo\File::put($file, $stub);
            $this->show("Class {$class} has been created.");
        } else {
            $this->show("Class {$class} ever exists.", 'ERROR');
        }
    }

    /**
     * @param null $table
     *
     * @return bool
     */
    private function hasTable($table): bool
    {
        $query = "SELECT COUNT(*) AS count FROM information_schema.tables WHERE table_name = '{$table}'";

        $res = (int) $this->query($query)->fetchColumn();

        return $res > 0;
    }

    /**
     * @throws \Octo\Exception
     */
    private function setup()
    {
        $cache_path = str_replace('##base_path##', path('base'), appenv('CACHE_PATH'));

        Octo\Config::set('dir.cache', $cache_path);

        if (!is_dir($cache_path)) {
            Octo\File::mkdir($cache_path);
        }
    }

    private function createRepository()
    {
        $this->getSchema()->create($this->table_migrations, function (Blueprint $table) {
            $table->collation = 'utf8_general_ci';
            $table->charset = 'utf8';
            $table->increments('id');
            $table->string('migration');
            $table->bigInteger('batch');
            $table->engine = 'InnoDB';
        });
    }

    private function createRepositorySeeder()
    {
        $this->getSchema()->create($this->table_seeds, function (Blueprint $table) {
            $table->collation = 'utf8_general_ci';
            $table->charset = 'utf8';
            $table->increments('id');
            $table->string('seeder');
            $table->bigInteger('batch');
            $table->engine = 'InnoDB';
        });
    }

    /**
     * @return Builder
     */
    public function getSchema()
    {
        return $this->schema;
    }

    /**
     * @return PDO
     */
    public function getPdo(): PDO
    {
        return $this->pdo;
    }

    /**
     * @return Orm
     */
    public function getOrm(): Orm
    {
        return $this->orm;
    }

    /**
     * @param string $type
     * @param string $class
     * @param string|null $table
     *
     * @return string
     */
    private function getStub(string $type, string $class, ?string $table = null): string
    {
        if ('resource' === $type) {
            $table = Pluralizer::plural(mb_strtolower($class));
            $model = ucfirst(mb_strtolower($class));
            $class = Inflector::camelize(mb_strtolower($class) . '_module');
        }

        if ($type === 'create') {
            return '<?php

use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Schema\Builder;

class ' . $class . '
{
    public function up(Builder $schema)
    {
        $schema->create(\'\', function (Blueprint $table) {
            $table->collation = \'utf8_general_ci\';
            $table->charset = \'utf8\';
            $table->increments(\'id\');
            $table->timestamp(\'created_at\')->nullable()->useCurrent();
            $table->timestamp(\'updated_at\')->nullable()->useCurrent();
            $table->engine = \'InnoDB\';
        });
    }

    public function down(Builder $schema)
    {
        $schema->dropIfExists(\'\');
    }
}
';
        }

        $stubs = [
            'update' => '<?php

use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Schema\Builder;

class ' . $class . '
{
    public function up(Builder $schema)
    {
        $schema->table(\'\', function (Blueprint $table) {
            //
        });
    }

    public function down(Builder $schema)
    {
        $schema->table(\'\', function (Blueprint $table) {
            //
        });
    }
}
',
            'seeder' => '<?php

use Faker\Generator;
use Octo\Orm;

class ' . $class . '
{
    public function seeds(Orm $db, Generator $faker)
    {
        //
    }
}
',
            'repository' => '<?php
namespace App\Repositories;

use App\Services\Repository;

class ' . $class . 'Repository extends Repository
{
    public function __construct()
    {
        //
    }
    
    /**
     * @return array
     * @throws \ReflectionException
     */
    public function crud()
    {
        $datas = [];

        $datas[\'entity\']        = \''.Pluralizer::plural(mb_strtolower($class)).'\';
        $datas[\'model\']         = \App\Models\\'.$class.'::class;
        $datas[\'per_page\']      = 15;
        $datas[\'singular\']      = __(\'crud.entities.'.mb_strtolower($class).'\');
        $datas[\'plural\']        = __(\'crud.entities.'.Pluralizer::plural(mb_strtolower($class)).'\');
        $datas[\'create_btn\']    = __(\'crud.general.create\') . \' \' . __(\'crud.general.a_m\') . \' \' . $datas[\'singular\'];
        $datas[\'list_title\']    = __(\'crud.general.index\') . \' \' . __(\'crud.general.of\') . \' \' . $datas[\'plural\'];
        $datas[\'show_title\']    = __(\'crud.general.show\') . \' \' . __(\'crud.general.a_m\') . \' \' . $datas[\'singular\'];
        $datas[\'create_title\']  = __(\'crud.general.add\') . \' \' . __(\'crud.general.a_m\') . \' \' . $datas[\'singular\'];
        $datas[\'edit_title\']    = __(\'crud.general.edit\') . \' \' . __(\'crud.general.a_m\') . \' \' . $datas[\'singular\'];

        $datas[\'fields\'] = [
            \'name\' => [
                \'label\' => __(\'crud.fields.name\'),
                \'required\' => true,
                \'type\' => \'text\',
                \'hooks\' => [],

                \'listable\' => true,
                \'viewable\' => true,
                \'searchable\' => true,
                \'editable\' => true,
                \'createable\' => true,
                \'exportable\' => true,
                \'sortable\' => true,
            ],
        ];
        
        return $datas;
    }

    /**
     * @return bool
     */
    public function can(): bool
    {
        return true;
    }

    /**
     * @return array
     */
    public function rules(): array
    {
        return [];
    }

    public function policies()
    {
        return null;
    }
}
',
            'eloquent' => '<?php

namespace App\Models;

use App\Services\Model;

class ' . $class . ' extends Model
{
    protected $table = \'' . $table . '\';
    protected $indexables = [];
    protected $forceCache = false;
    protected $rules = [];
}
',
            'request' => '<?php

namespace App\Requests;

use Octo\FastRequest;

class ' . $class . 'Request extends FastRequest
{
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * @return bool
     */
    protected function can(): bool
    {
        return true;
    }

    /**
     * @return array
     */
    protected function rules(): array
    {
        // return [];
    }
}
',
            'entity' => '<?php

namespace App\Model;

use Octo\Entity;

class ' . $class . ' extends Entity
{

}
',
            'job' => '<?php

namespace App\Jobs;

use Octo\FastJobInterface;
use Octo\Framework;

class ' . $class . ' implements FastJobInterface
{
    use Framework;

    public function __construct()
    {
        //
    }

    public function process()
    {
        //
    }

    public function onSuccess()
    {
        //
    }

    public function onFail()
    {
        //
    }
}
',
            'subscriber' => '<?php
namespace App\Subscribers;

use Octo\FastEventSubscriberInterface as FESI;

class ' . $class . ' implements FESI
{
    public function getEvents()
    {
        //
    }
}
',
            'module' => '<?php
namespace App\Modules;

use App\Facades\Route;
use App\Services\Module;

class ' . $class . ' extends Module
{
    public function routes()
    {
        //
    }
}
',
            'resource' => '<?php
namespace App\Modules;

use App\Facades\Redirect;
use App\Facades\Route;
use App\Models\\' . Inflector::camelize(Pluralizer::singular($table)) . ';
use App\Models\User;
use App\Requests\\' . Inflector::camelize(Pluralizer::singular($table)) . 'Request;
use App\Services\Module;

class ' . $class . ' extends Module
{
    public function routes()
    {
        Route::get("' . $table . '", [$this, "index"], "' . $table . '.index");
        Route::get("' . $table . '/{' . Pluralizer::singular($table) . '}/show", [$this, "show"], "' . $table . '.show");
        Route::get("' . $table . '/create", [$this, "create"], "' . $table . '.create");
        Route::post("' . $table . '/create", [$this, "store"]);
        Route::get("' . $table . '/{' . Pluralizer::singular($table) . '}/edit", [$this, "edit"], "' . $table . '.edit");
        Route::put("' . $table . '/{' . Pluralizer::singular($table) . '}/edit", [$this, "update"]);
        Route::delete("' . $table . '/{' . Pluralizer::singular($table) . '}/destroy", [$this, "destroy"], "' . $table . '.destroy");
    }
    
    public function policies()
    {
        $this->addPolicy("' . $table . '.index", function (User $user) {
            return true;
        });
        
        $this->addPolicy("' . $table . '.show", function (User $user) {
            return true;
        });
        
        $this->addPolicy("' . $table . '.create", function (User $user) {
            return true;
        });
        
        $this->addPolicy("' . $table . '.store", function (User $user) {
            return true;
        });
        
        $this->addPolicy("' . $table . '.edit", function (User $user) {
            return true;
        });
        
        $this->addPolicy("' . $table . '.update", function (User $user) {
            return true;
        });
        
        $this->addPolicy("' . $table . '.destroy", function (User $user) {
            return true;
        });
    }
    
    /**
     * @return mixed
     * @throws \ReflectionException
     */
    public function index()
    {   
        if (true === ($response = $this->untilIsGranted("' . $table . '.index"))) {
            $' . $table . ' = ' . $model . '::all();
            
            return $this->view("' . $table . '.index", compact("' . $table . '"));
        }
        
        return $reponse;
    }
    
    /**
     * @param ' . $model . ' $' . Pluralizer::singular($table) . '
     * @return mixed
     */
   public function show(' . $model . ' $' . Pluralizer::singular($table) . ')
    {   
        if (true === ($response = $this->untilIsGranted("' . $table . '.show"))) {
            return $this->view("' . $table . '.show", compact("' . Pluralizer::singular($table) . '"));
        }
        
        return $response;
    }
    
    /**
     * @return mixed
     */
    public function create()
    {   
        if (true === ($response = $this->untilIsGranted("' . $table . '.create"))) {
            return Redirect::route("' . $table . '.create");
        }
        
        return $response;
    }
    
    /**
     * @param ' . $model . 'Request $request
     * @return mixed
     */
    public function store(' . $model . 'Request $request)
    {   
        if (true === ($response = $this->untilIsGranted("' . $table . '.store"))) {
            $' . Pluralizer::singular($table) . ' = ' . $model . '::create($request->only());
            
            return Redirect::success("")::route("' . $table . '.index", compact("' . Pluralizer::singular($table) . '"));
        }
        
        return $response;
    }
    
    /**
     * @param ' . $model . ' $' . Pluralizer::singular($table) . '
     * @return mixed
     */
    public function edit(' . $model . ' $' . Pluralizer::singular($table) . ')
    {   
        if (true === ($response = $this->untilIsGranted("' . $table . '.edit"))) {
            return $this->view("' . $table . '.edit", compact("' . Pluralizer::singular($table) . '"));
        }
        
        return $response;
    }
    
    /**
     * @param ' . $model . ' $' . Pluralizer::singular($table) . '
     * @param ' . $model . 'Request $request
     * @return mixed
     */
    public function update(' . $model . ' $' . Pluralizer::singular($table) . ', ' . $model . 'Request $request)
    {   
        if (true === ($response = $this->untilIsGranted("' . $table . '.update"))) {
            $' . Pluralizer::singular($table) . '->update();
            
            return Redirect::success("")::route("' . $table . '.index");
        }
        
        return $response;
    }

    /**
     * @param ' . $model . ' $' . Pluralizer::singular($table) . '
     * @param ' . $model . 'Request $request
     * @return mixed
     * @throws \Exception
     */    
    public function destroy(' . $model . ' $' . Pluralizer::singular($table) . ', ' . $model . 'Request $request)
    {   
        if (true === ($response = $this->untilIsGranted("' . $table . '.destroy"))) {
            $' . Pluralizer::singular($table) . '->delete();
            
            return Redirect::success("")::route("' . $table . '.index");
        }
        
        return $response;
    }
}
',
            'middleware' => '<?php
namespace App\Middlewares;

use Interop\Http\ServerMiddleware\DelegateInterface;
use Octo\FastMiddleware;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

class ' . $class . ' extends FastMiddleware
{
    /**
     * @param ServerRequestInterface $request
     * @param DelegateInterface $delegate
     * @return ResponseInterface
     */
    public function process(ServerRequestInterface $request, ?DelegateInterface $next = null): ResponseInterface
    {
        //
    }
}
',
            'factory' => '<?php
namespace App\Factories;

use Faker\Generator as Faker;
use Octo\FastFactory;

class ' . $class . ' 
{
    /**
     * @throws \Exception
     */
    public function __construct()
    {
        FastFactory::add(\App\Models\\' . $class . '::class, function (Faker $faker) {
            return [];
        });
    }
}
',
            'observer' => '<?php
namespace App\Observers;

class ' . $class . ' 
{
    
}
',
            'notification' => '<?php
namespace App\Notifications;

class ' . $class . ' 
{
    public function channels()
    {
        return ["mail"];
    }
    
    public function mail($notifiable)
    {
        //
    }
}
',
            'service' => '<?php
namespace App\Services;

class ' . $class . ' 
{
    
}
',
            'callable' => '<?php
namespace App\Callables;

class ' . $class . ' extends \Octo\ModuleMiddleware
{
    public function __construct()
    {
        parent::__construct();
    }
    
    public function before()
    {
        //
    }
    
    public function after()
    {
        //
    }
}
',
            'event' => '<?php

namespace App\Events;

use Octo\FastEventInterface;
use Octo\Framework;

class ' . $class . ' implements FastEventInterface
{
    use Framework;

    public function __construct()
    {
        //
    }

    public function fire()
    {
        //
    }

    public function onSuccess()
    {
        //
    }

    public function onFail()
    {
        //
    }
}
',
        ];

        return $stubs[$type] ?? '';
    }

    /**
     * @param string $sql
     *
     * @return PDOStatement
     */
    private function query(string $sql): PDOStatement
    {
        return $this->getPdo()->query($sql);
    }

    /**
     * @param string $sql
     *
     * @return int
     */
    private function exec(string $sql)
    {
        return $this->getPdo()->exec($sql);
    }
}
